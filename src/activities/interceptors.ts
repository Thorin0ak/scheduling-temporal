import {Context} from '@temporalio/activity';
import { ActivityInboundCallsInterceptor, ActivityExecuteInput, Next } from '@temporalio/worker';
import {Logger} from 'winston';
import { logger } from '../utils/logger-config';

export interface ContextWithLogger extends Context {
    logger: Logger;
}

export const getContext = (): ContextWithLogger => {
    const ctx = Context.current() as ContextWithLogger;
    ctx.logger = logger;
    return  ctx;
};

/** Logs Activity executions and their duration */
export class ActivityInboundLogInterceptor implements ActivityInboundCallsInterceptor {
    public readonly logger: Logger;

    constructor(ctx: Context) {
        // this.logger = logger;
        this.logger = logger.child({
            activity: ctx.info,
        });

        // Set a logger instance on the current Activity Context to provide
        // contextual logging information to each log entry generated by the Activity.
        (ctx as ContextWithLogger).logger = this.logger;
    }

    async execute(input: ActivityExecuteInput, next: Next<ActivityInboundCallsInterceptor, 'execute'>): Promise<unknown> {
        let error: any = undefined;
        const startTime = process.hrtime.bigint();
        try {
            return await next(input);
        } catch (err: any) {
            error = err;
            throw err;
        } finally {
            const durationNanos = process.hrtime.bigint() - startTime;
            const durationMs = Number(durationNanos / 1_000_000n);
            if (error) {
                this.logger.error('activity failed', { error, durationMs });
            } else {
                this.logger.debug('activity completed', { durationMs });
            }
        }
    }
}
